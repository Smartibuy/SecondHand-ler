#!/usr/bin/env ruby
require 'rubygems'
require 'commander'
require_relative '../lib/second_handler'

def read_char
  STDIN.echo = false
  STDIN.raw!

  input = STDIN.getc.chr
  if input == "\e" then
    input << STDIN.read_nonblock(3) rescue nil
    input << STDIN.read_nonblock(2) rescue nil
  end
ensure
  STDIN.echo = true
  STDIN.cooked!

  return input
end

def print_page(page)
  page.each do |e|
    returns = ''
    if e['id']
      returns << "<ID>\n" << e['id']
    end

    if e['message']
      returns << "<Informations>\n" << e['message']
    end

    if e['updated_time']
      returns << "<Update Time>\n" << e['updated_time']
    end

    if e['attachments']
      returns << "\n\n<Attachments>\n"
      puts e['attachments']
    end

    puts returns
    puts "\n\n===================================="
  end
end

Commander.configure do
  program :name, 'SecondHandler'
  program :version, '0.0.1'
  program :description, 'A retriever of second hand information of Facebook or Twitter.'

  command :fb do |c|
    c.syntax = 'second_handler fb --token access_token --id group_id'
    c.description = 'Show selling information of a Facebook group'
    c.option '--token access_token', String, 'Access token'
    c.option '--id group_id', String, 'Group ID'
    c.action do |args, options|
      if options.token && options.id
        fb = SecondHandler::FbGroupPost.new(options.token, options.id)
        page = fb.first_page
        print_page(page)
        cmd = read_char
        while cmd != "\u0003" do
          case cmd
          when "\e[A"
            puts '== Previous Page =='
            print_page(fb.previous_page)
          when "\e[B"
            puts '== Next Page =='
            print_page(fb.next_page)
          end
          cmd = read_char
        end
      end
    end
  end

  command :twitter do |c|
    c.syntax = 'second_handler twitter'
    c.description = 'Show selling information of twitter'
    # Implementing.
  end
end
